package com.hotelBooking.utils;


import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.UUID;

import org.apache.log4j.Logger;

import com.hotelBooking.models.AppUser;

import sun.misc.BASE64Encoder;

@SuppressWarnings("restriction")
public class PasswordGeneration {
	private static final Logger LOGGER = Logger.getLogger(PasswordGeneration.class);

	public static String generatePassword() {
		return UUID.randomUUID().toString().substring(0, 10);
	}

	public static Map<String, Object> generatePassword(AppUser user) {
		Map<String, Object> returnObject = new HashMap<String, Object>();
		String autoGeneratedPassword = generatePassword();
		returnObject.put("password", autoGeneratedPassword.trim());
		returnObject.put("appUser", getAppUser(autoGeneratedPassword.trim(), user));
		LOGGER.info("PASSWORD TO LOGIN" + autoGeneratedPassword.trim());
		return returnObject;
	}

	public static AppUser getAppUser(String autoGenPwd, AppUser user) {
		BASE64Encoder encoder = new BASE64Encoder();
		Random random = new SecureRandom();
		byte[] saltArray = new byte[32];
		random.nextBytes(saltArray);
		String randomSalt = (encoder.encodeBuffer(saltArray)).trim();
		String passwordWithSalt = (autoGenPwd + randomSalt).trim();
		try {
			MessageDigest sha256 = MessageDigest.getInstance("SHA-256");
			byte[] passBytes = passwordWithSalt.getBytes();
			String hashedPasswordWithSalt = encoder.encodeBuffer(sha256.digest(passBytes));
			user.setPassword(hashedPasswordWithSalt);
			user.setSalt(randomSalt);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return user;
	}

	public static boolean matchPassword(String password, String salt, String cryptedPwd)
			throws NoSuchAlgorithmException {
		BASE64Encoder encoder = new BASE64Encoder();
		String passwordWithSalt = password + salt;
		byte[] passBytes = passwordWithSalt.getBytes();
		MessageDigest sha256 = MessageDigest.getInstance("SHA-256");
		String hashedPasswordWithSalt = encoder.encodeBuffer(sha256.digest(passBytes));
		return cryptedPwd.trim().equals(hashedPasswordWithSalt.trim());
	}

	public static AppUser changePassword(String password, String salt, AppUser user) throws NoSuchAlgorithmException {
		BASE64Encoder encoder = new BASE64Encoder();
		String passwordWithSalt = password + salt;
		byte[] passBytes = passwordWithSalt.getBytes();
		MessageDigest sha256 = MessageDigest.getInstance("SHA-256");
		String hashedPasswordWithSalt = encoder.encodeBuffer(sha256.digest(passBytes));
		user.setPassword(hashedPasswordWithSalt.trim());
		return user;
	}

}
